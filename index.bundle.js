/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t={240:(e,t,n)=>{n.d(t,{fi:()=>w,kZ:()=>b});var r=n(400),o=n(163),i=n(57),a=n(556),s=n(333),f=n(63),c=n(252),p=n(611),d=n(138);function u(e,t,n){void 0===n&&(n=!1);var u,l,v=(0,a.Re)(t),m=(0,a.Re)(t)&&function(e){var t=e.getBoundingClientRect(),n=(0,d.NM)(t.width)/e.offsetWidth||1,r=(0,d.NM)(t.height)/e.offsetHeight||1;return 1!==n||1!==r}(t),h=(0,c.Z)(t),Z=(0,r.Z)(e,m,n),g={scrollLeft:0,scrollTop:0},y={x:0,y:0};return(v||!v&&!n)&&(("body"!==(0,s.Z)(t)||(0,p.Z)(h))&&(g=(u=t)!==(0,i.Z)(u)&&(0,a.Re)(u)?{scrollLeft:(l=u).scrollLeft,scrollTop:l.scrollTop}:(0,o.Z)(u)),(0,a.Re)(t)?((y=(0,r.Z)(t,!0)).x+=t.clientLeft,y.y+=t.clientTop):h&&(y.x=(0,f.Z)(h))),{x:Z.left+g.scrollLeft-y.x,y:Z.top+g.scrollTop-y.y,width:Z.width,height:Z.height}}var l=n(583),v=n(624),m=n(779),h=n(701);function Z(e){var t=new Map,n=new Set,r=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&o(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),r}var g={placement:"bottom",modifiers:[],strategy:"absolute"};function y(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function b(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,o=t.defaultOptions,i=void 0===o?g:o;return function(e,t,n){void 0===n&&(n=i);var o,s,f={placement:"bottom",orderedModifiers:[],options:Object.assign({},g,i),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],p=!1,d={state:f,setOptions:function(n){var o="function"==typeof n?n(f.options):n;b(),f.options=Object.assign({},i,f.options,o),f.scrollParents={reference:(0,a.kK)(e)?(0,v.Z)(e):e.contextElement?(0,v.Z)(e.contextElement):[],popper:(0,v.Z)(t)};var s,p,u=function(e){var t=Z(e);return h.xs.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((s=[].concat(r,f.options.modifiers),p=s.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(p).map((function(e){return p[e]}))));return f.orderedModifiers=u.filter((function(e){return e.enabled})),f.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var i=o({state:f,name:t,instance:d,options:r});c.push(i||function(){})}})),d.update()},forceUpdate:function(){if(!p){var e=f.elements,t=e.reference,n=e.popper;if(y(t,n)){f.rects={reference:u(t,(0,m.Z)(n),"fixed"===f.options.strategy),popper:(0,l.Z)(n)},f.reset=!1,f.placement=f.options.placement,f.orderedModifiers.forEach((function(e){return f.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<f.orderedModifiers.length;r++)if(!0!==f.reset){var o=f.orderedModifiers[r],i=o.fn,a=o.options,s=void 0===a?{}:a,c=o.name;"function"==typeof i&&(f=i({state:f,options:s,name:c,instance:d})||f)}else f.reset=!1,r=-1}}},update:(o=function(){return new Promise((function(e){d.forceUpdate(),e(f)}))},function(){return s||(s=new Promise((function(e){Promise.resolve().then((function(){s=void 0,e(o())}))}))),s}),destroy:function(){b(),p=!0}};if(!y(e,t))return d;function b(){c.forEach((function(e){return e()})),c=[]}return d.setOptions(n).then((function(e){!p&&n.onFirstUpdate&&n.onFirstUpdate(e)})),d}}var w=b()},985:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(556);function o(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&(0,r.Zq)(n)){var o=t;do{if(o&&e.isSameNode(o))return!0;o=o.parentNode||o.host}while(o)}return!1}},400:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(556),o=n(138),i=n(57),a=n(977);function s(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var s=e.getBoundingClientRect(),f=1,c=1;t&&(0,r.Re)(e)&&(f=e.offsetWidth>0&&(0,o.NM)(s.width)/e.offsetWidth||1,c=e.offsetHeight>0&&(0,o.NM)(s.height)/e.offsetHeight||1);var p=((0,r.kK)(e)?(0,i.Z)(e):window).visualViewport,d=!(0,a.Z)()&&n,u=(s.left+(d&&p?p.offsetLeft:0))/f,l=(s.top+(d&&p?p.offsetTop:0))/c,v=s.width/f,m=s.height/c;return{width:v,height:m,top:l,right:u+v,bottom:l+m,left:u,x:u,y:l}}},62:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(57);function o(e){return(0,r.Z)(e).getComputedStyle(e)}},252:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(556);function o(e){return(((0,r.kK)(e)?e.ownerDocument:e.document)||window.document).documentElement}},583:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(400);function o(e){var t=(0,r.Z)(e),n=e.offsetWidth,o=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-o)<=1&&(o=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:o}}},333:(e,t,n)=>{function r(e){return e?(e.nodeName||"").toLowerCase():null}n.d(t,{Z:()=>r})},779:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(57),o=n(333),i=n(62),a=n(556);function s(e){return["table","td","th"].indexOf((0,o.Z)(e))>=0}var f=n(923),c=n(918);function p(e){return(0,a.Re)(e)&&"fixed"!==(0,i.Z)(e).position?e.offsetParent:null}function d(e){for(var t=(0,r.Z)(e),n=p(e);n&&s(n)&&"static"===(0,i.Z)(n).position;)n=p(n);return n&&("html"===(0,o.Z)(n)||"body"===(0,o.Z)(n)&&"static"===(0,i.Z)(n).position)?t:n||function(e){var t=/firefox/i.test((0,c.Z)());if(/Trident/i.test((0,c.Z)())&&(0,a.Re)(e)&&"fixed"===(0,i.Z)(e).position)return null;var n=(0,f.Z)(e);for((0,a.Zq)(n)&&(n=n.host);(0,a.Re)(n)&&["html","body"].indexOf((0,o.Z)(n))<0;){var r=(0,i.Z)(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}},923:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(333),o=n(252),i=n(556);function a(e){return"html"===(0,r.Z)(e)?e:e.assignedSlot||e.parentNode||((0,i.Zq)(e)?e.host:null)||(0,o.Z)(e)}},57:(e,t,n)=>{function r(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}n.d(t,{Z:()=>r})},163:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(57);function o(e){var t=(0,r.Z)(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}},63:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(400),o=n(252),i=n(163);function a(e){return(0,r.Z)((0,o.Z)(e)).left+(0,i.Z)(e).scrollLeft}},556:(e,t,n)=>{n.d(t,{Re:()=>i,Zq:()=>a,kK:()=>o});var r=n(57);function o(e){return e instanceof(0,r.Z)(e).Element||e instanceof Element}function i(e){return e instanceof(0,r.Z)(e).HTMLElement||e instanceof HTMLElement}function a(e){return"undefined"!=typeof ShadowRoot&&(e instanceof(0,r.Z)(e).ShadowRoot||e instanceof ShadowRoot)}},977:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(918);function o(){return!/^((?!chrome|android).)*safari/i.test((0,r.Z)())}},611:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(62);function o(e){var t=(0,r.Z)(e),n=t.overflow,o=t.overflowX,i=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+i+o)}},624:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(923),o=n(611),i=n(333),a=n(556);function s(e){return["html","body","#document"].indexOf((0,i.Z)(e))>=0?e.ownerDocument.body:(0,a.Re)(e)&&(0,o.Z)(e)?e:s((0,r.Z)(e))}var f=n(57);function c(e,t){var n;void 0===t&&(t=[]);var i=s(e),a=i===(null==(n=e.ownerDocument)?void 0:n.body),p=(0,f.Z)(i),d=a?[p].concat(p.visualViewport||[],(0,o.Z)(i)?i:[]):i,u=t.concat(d);return a?u:u.concat(c((0,r.Z)(d)))}},701:(e,t,n)=>{n.d(t,{BL:()=>c,Ct:()=>h,DH:()=>w,F2:()=>i,I:()=>o,MS:()=>k,N7:()=>Z,Pj:()=>u,XM:()=>b,YP:()=>v,bw:()=>m,cW:()=>j,d7:()=>s,ij:()=>g,iv:()=>O,k5:()=>l,mv:()=>f,r5:()=>y,t$:()=>a,ut:()=>p,wX:()=>x,we:()=>r,xs:()=>E,zV:()=>d});var r="top",o="bottom",i="right",a="left",s="auto",f=[r,o,i,a],c="start",p="end",d="clippingParents",u="viewport",l="popper",v="reference",m=f.reduce((function(e,t){return e.concat([t+"-"+c,t+"-"+p])}),[]),h=[].concat(f,[s]).reduce((function(e,t){return e.concat([t,t+"-"+c,t+"-"+p])}),[]),Z="beforeRead",g="read",y="afterRead",b="beforeMain",w="main",x="afterMain",O="beforeWrite",j="write",k="afterWrite",E=[Z,g,y,b,w,x,O,j,k]},704:(e,t,n)=>{n.r(t),n.d(t,{afterMain:()=>r.wX,afterRead:()=>r.r5,afterWrite:()=>r.MS,applyStyles:()=>o.Z,arrow:()=>i.Z,auto:()=>r.d7,basePlacements:()=>r.mv,beforeMain:()=>r.XM,beforeRead:()=>r.N7,beforeWrite:()=>r.iv,bottom:()=>r.I,clippingParents:()=>r.zV,computeStyles:()=>a.Z,createPopper:()=>m.fi,createPopperBase:()=>l.fi,createPopperLite:()=>Z,detectOverflow:()=>v.Z,end:()=>r.ut,eventListeners:()=>s.Z,flip:()=>f.Z,hide:()=>c.Z,left:()=>r.t$,main:()=>r.DH,modifierPhases:()=>r.xs,offset:()=>p.Z,placements:()=>r.Ct,popper:()=>r.k5,popperGenerator:()=>l.kZ,popperOffsets:()=>d.Z,preventOverflow:()=>u.Z,read:()=>r.ij,reference:()=>r.YP,right:()=>r.F2,start:()=>r.BL,top:()=>r.we,variationPlacements:()=>r.bw,viewport:()=>r.Pj,write:()=>r.cW});var r=n(701),o=n(824),i=n(896),a=n(531),s=n(372),f=n(228),c=n(892),p=n(122),d=n(421),u=n(920),l=n(240),v=n(966),m=n(804),h=[s.Z,d.Z,a.Z,o.Z],Z=(0,l.kZ)({defaultModifiers:h})},824:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(333),o=n(556);const i={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},i=t.attributes[e]||{},a=t.elements[e];(0,o.Re)(a)&&(0,r.Z)(a)&&(Object.assign(a.style,n),Object.keys(i).forEach((function(e){var t=i[e];!1===t?a.removeAttribute(e):a.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],a=t.attributes[e]||{},s=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});(0,o.Re)(i)&&(0,r.Z)(i)&&(Object.assign(i.style,s),Object.keys(a).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]}},896:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(206),o=n(583),i=n(985),a=n(779),s=n(516),f=n(711),c=n(293),p=n(706),d=n(701);const u={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,u=e.options,l=n.elements.arrow,v=n.modifiersData.popperOffsets,m=(0,r.Z)(n.placement),h=(0,s.Z)(m),Z=[d.t$,d.F2].indexOf(m)>=0?"height":"width";if(l&&v){var g=function(e,t){return e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e,(0,c.Z)("number"!=typeof e?e:(0,p.Z)(e,d.mv))}(u.padding,n),y=(0,o.Z)(l),b="y"===h?d.we:d.t$,w="y"===h?d.I:d.F2,x=n.rects.reference[Z]+n.rects.reference[h]-v[h]-n.rects.popper[Z],O=v[h]-n.rects.reference[h],j=(0,a.Z)(l),k=j?"y"===h?j.clientHeight||0:j.clientWidth||0:0,E=x/2-O/2,P=g[b],M=k-y[Z]-g[w],D=k/2-y[Z]/2+E,L=(0,f.u)(P,D,M),R=h;n.modifiersData[i]=((t={})[R]=L,t.centerOffset=L-D,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&(0,i.Z)(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},531:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(701),o=n(779),i=n(57),a=n(252),s=n(62),f=n(206),c=n(943),p=n(138),d={top:"auto",right:"auto",bottom:"auto",left:"auto"};function u(e){var t,n=e.popper,f=e.popperRect,c=e.placement,u=e.variation,l=e.offsets,v=e.position,m=e.gpuAcceleration,h=e.adaptive,Z=e.roundOffsets,g=e.isFixed,y=l.x,b=void 0===y?0:y,w=l.y,x=void 0===w?0:w,O="function"==typeof Z?Z({x:b,y:x}):{x:b,y:x};b=O.x,x=O.y;var j=l.hasOwnProperty("x"),k=l.hasOwnProperty("y"),E=r.t$,P=r.we,M=window;if(h){var D=(0,o.Z)(n),L="clientHeight",R="clientWidth";D===(0,i.Z)(n)&&(D=(0,a.Z)(n),"static"!==(0,s.Z)(D).position&&"absolute"===v&&(L="scrollHeight",R="scrollWidth")),(c===r.we||(c===r.t$||c===r.F2)&&u===r.ut)&&(P=r.I,x-=(g&&D===M&&M.visualViewport?M.visualViewport.height:D[L])-f.height,x*=m?1:-1),c!==r.t$&&(c!==r.we&&c!==r.I||u!==r.ut)||(E=r.F2,b-=(g&&D===M&&M.visualViewport?M.visualViewport.width:D[R])-f.width,b*=m?1:-1)}var A,S=Object.assign({position:v},h&&d),B=!0===Z?function(e,t){var n=e.x,r=e.y,o=t.devicePixelRatio||1;return{x:(0,p.NM)(n*o)/o||0,y:(0,p.NM)(r*o)/o||0}}({x:b,y:x},(0,i.Z)(n)):{x:b,y:x};return b=B.x,x=B.y,m?Object.assign({},S,((A={})[P]=k?"0":"",A[E]=j?"0":"",A.transform=(M.devicePixelRatio||1)<=1?"translate("+b+"px, "+x+"px)":"translate3d("+b+"px, "+x+"px, 0)",A)):Object.assign({},S,((t={})[P]=k?x+"px":"",t[E]=j?b+"px":"",t.transform="",t))}const l={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=void 0===r||r,i=n.adaptive,a=void 0===i||i,s=n.roundOffsets,p=void 0===s||s,d={placement:(0,f.Z)(t.placement),variation:(0,c.Z)(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,u(Object.assign({},d,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:p})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,u(Object.assign({},d,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:p})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}}},372:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(57),o={passive:!0};const i={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,a=i.scroll,s=void 0===a||a,f=i.resize,c=void 0===f||f,p=(0,r.Z)(t.elements.popper),d=[].concat(t.scrollParents.reference,t.scrollParents.popper);return s&&d.forEach((function(e){e.addEventListener("scroll",n.update,o)})),c&&p.addEventListener("resize",n.update,o),function(){s&&d.forEach((function(e){e.removeEventListener("scroll",n.update,o)})),c&&p.removeEventListener("resize",n.update,o)}},data:{}}},228:(e,t,n)=>{n.d(t,{Z:()=>d});var r={left:"right",right:"left",bottom:"top",top:"bottom"};function o(e){return e.replace(/left|right|bottom|top/g,(function(e){return r[e]}))}var i=n(206),a={start:"end",end:"start"};function s(e){return e.replace(/start|end/g,(function(e){return a[e]}))}var f=n(966),c=n(943),p=n(701);const d={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var a=n.mainAxis,d=void 0===a||a,u=n.altAxis,l=void 0===u||u,v=n.fallbackPlacements,m=n.padding,h=n.boundary,Z=n.rootBoundary,g=n.altBoundary,y=n.flipVariations,b=void 0===y||y,w=n.allowedAutoPlacements,x=t.options.placement,O=(0,i.Z)(x),j=v||(O!==x&&b?function(e){if((0,i.Z)(e)===p.d7)return[];var t=o(e);return[s(e),t,s(t)]}(x):[o(x)]),k=[x].concat(j).reduce((function(e,n){return e.concat((0,i.Z)(n)===p.d7?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=n.boundary,a=n.rootBoundary,s=n.padding,d=n.flipVariations,u=n.allowedAutoPlacements,l=void 0===u?p.Ct:u,v=(0,c.Z)(r),m=v?d?p.bw:p.bw.filter((function(e){return(0,c.Z)(e)===v})):p.mv,h=m.filter((function(e){return l.indexOf(e)>=0}));0===h.length&&(h=m);var Z=h.reduce((function(t,n){return t[n]=(0,f.Z)(e,{placement:n,boundary:o,rootBoundary:a,padding:s})[(0,i.Z)(n)],t}),{});return Object.keys(Z).sort((function(e,t){return Z[e]-Z[t]}))}(t,{placement:n,boundary:h,rootBoundary:Z,padding:m,flipVariations:b,allowedAutoPlacements:w}):n)}),[]),E=t.rects.reference,P=t.rects.popper,M=new Map,D=!0,L=k[0],R=0;R<k.length;R++){var A=k[R],S=(0,i.Z)(A),B=(0,c.Z)(A)===p.BL,F=[p.we,p.I].indexOf(S)>=0,V=F?"width":"height",W=(0,f.Z)(t,{placement:A,boundary:h,rootBoundary:Z,altBoundary:g,padding:m}),I=F?B?p.F2:p.t$:B?p.I:p.we;E[V]>P[V]&&(I=o(I));var q=o(I),N=[];if(d&&N.push(W[S]<=0),l&&N.push(W[I]<=0,W[q]<=0),N.every((function(e){return e}))){L=A,D=!1;break}M.set(A,N)}if(D)for(var T=function(e){var t=k.find((function(t){var n=M.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return L=t,"break"},H=b?3:1;H>0&&"break"!==T(H);H--);t.placement!==L&&(t.modifiersData[r]._skip=!0,t.placement=L,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},892:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(701),o=n(966);function i(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function a(e){return[r.we,r.F2,r.I,r.t$].some((function(t){return e[t]>=0}))}const s={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,s=t.rects.popper,f=t.modifiersData.preventOverflow,c=(0,o.Z)(t,{elementContext:"reference"}),p=(0,o.Z)(t,{altBoundary:!0}),d=i(c,r),u=i(p,s,f),l=a(d),v=a(u);t.modifiersData[n]={referenceClippingOffsets:d,popperEscapeOffsets:u,isReferenceHidden:l,hasPopperEscaped:v},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":v})}}},122:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(206),o=n(701);const i={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,a=n.offset,s=void 0===a?[0,0]:a,f=o.Ct.reduce((function(e,n){return e[n]=function(e,t,n){var i=(0,r.Z)(e),a=[o.t$,o.we].indexOf(i)>=0?-1:1,s="function"==typeof n?n(Object.assign({},t,{placement:e})):n,f=s[0],c=s[1];return f=f||0,c=(c||0)*a,[o.t$,o.F2].indexOf(i)>=0?{x:c,y:f}:{x:f,y:c}}(n,t.rects,s),e}),{}),c=f[t.placement],p=c.x,d=c.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=p,t.modifiersData.popperOffsets.y+=d),t.modifiersData[i]=f}}},421:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(581);const o={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=(0,r.Z)({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}}},920:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(701),o=n(206),i=n(516),a=n(711),s=n(583),f=n(779),c=n(966),p=n(943),d=n(607),u=n(138);const l={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,l=e.name,v=n.mainAxis,m=void 0===v||v,h=n.altAxis,Z=void 0!==h&&h,g=n.boundary,y=n.rootBoundary,b=n.altBoundary,w=n.padding,x=n.tether,O=void 0===x||x,j=n.tetherOffset,k=void 0===j?0:j,E=(0,c.Z)(t,{boundary:g,rootBoundary:y,padding:w,altBoundary:b}),P=(0,o.Z)(t.placement),M=(0,p.Z)(t.placement),D=!M,L=(0,i.Z)(P),R="x"===L?"y":"x",A=t.modifiersData.popperOffsets,S=t.rects.reference,B=t.rects.popper,F="function"==typeof k?k(Object.assign({},t.rects,{placement:t.placement})):k,V="number"==typeof F?{mainAxis:F,altAxis:F}:Object.assign({mainAxis:0,altAxis:0},F),W=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,I={x:0,y:0};if(A){if(m){var q,N="y"===L?r.we:r.t$,T="y"===L?r.I:r.F2,H="y"===L?"height":"width",C=A[L],$=C+E[N],K=C-E[T],z=O?-B[H]/2:0,X=M===r.BL?S[H]:B[H],Y=M===r.BL?-B[H]:-S[H],_=t.elements.arrow,U=O&&_?(0,s.Z)(_):{width:0,height:0},G=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:(0,d.Z)(),J=G[N],Q=G[T],ee=(0,a.u)(0,S[H],U[H]),te=D?S[H]/2-z-ee-J-V.mainAxis:X-ee-J-V.mainAxis,ne=D?-S[H]/2+z+ee+Q+V.mainAxis:Y+ee+Q+V.mainAxis,re=t.elements.arrow&&(0,f.Z)(t.elements.arrow),oe=re?"y"===L?re.clientTop||0:re.clientLeft||0:0,ie=null!=(q=null==W?void 0:W[L])?q:0,ae=C+te-ie-oe,se=C+ne-ie,fe=(0,a.u)(O?(0,u.VV)($,ae):$,C,O?(0,u.Fp)(K,se):K);A[L]=fe,I[L]=fe-C}if(Z){var ce,pe="x"===L?r.we:r.t$,de="x"===L?r.I:r.F2,ue=A[R],le="y"===R?"height":"width",ve=ue+E[pe],me=ue-E[de],he=-1!==[r.we,r.t$].indexOf(P),Ze=null!=(ce=null==W?void 0:W[R])?ce:0,ge=he?ve:ue-S[le]-B[le]-Ze+V.altAxis,ye=he?ue+S[le]+B[le]-Ze-V.altAxis:me,be=O&&he?(0,a.q)(ge,ue,ye):(0,a.u)(O?ge:ve,ue,O?ye:me);A[R]=be,I[R]=be-ue}t.modifiersData[l]=I}},requiresIfExists:["offset"]}},804:(e,t,n)=>{n.d(t,{fi:()=>v});var r=n(240),o=n(372),i=n(421),a=n(531),s=n(824),f=n(122),c=n(228),p=n(920),d=n(896),u=n(892),l=[o.Z,i.Z,a.Z,s.Z,f.Z,c.Z,p.Z,d.Z,u.Z],v=(0,r.kZ)({defaultModifiers:l})},581:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(206),o=n(943),i=n(516),a=n(701);function s(e){var t,n=e.reference,s=e.element,f=e.placement,c=f?(0,r.Z)(f):null,p=f?(0,o.Z)(f):null,d=n.x+n.width/2-s.width/2,u=n.y+n.height/2-s.height/2;switch(c){case a.we:t={x:d,y:n.y-s.height};break;case a.I:t={x:d,y:n.y+n.height};break;case a.F2:t={x:n.x+n.width,y:u};break;case a.t$:t={x:n.x-s.width,y:u};break;default:t={x:n.x,y:n.y}}var l=c?(0,i.Z)(c):null;if(null!=l){var v="y"===l?"height":"width";switch(p){case a.BL:t[l]=t[l]-(n[v]/2-s[v]/2);break;case a.ut:t[l]=t[l]+(n[v]/2-s[v]/2)}}return t}},966:(e,t,n)=>{n.d(t,{Z:()=>O});var r=n(701),o=n(57),i=n(252),a=n(63),s=n(977),f=n(62),c=n(163),p=n(138),d=n(624),u=n(779),l=n(556),v=n(400),m=n(923),h=n(985),Z=n(333);function g(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function y(e,t,n){return t===r.Pj?g(function(e,t){var n=(0,o.Z)(e),r=(0,i.Z)(e),f=n.visualViewport,c=r.clientWidth,p=r.clientHeight,d=0,u=0;if(f){c=f.width,p=f.height;var l=(0,s.Z)();(l||!l&&"fixed"===t)&&(d=f.offsetLeft,u=f.offsetTop)}return{width:c,height:p,x:d+(0,a.Z)(e),y:u}}(e,n)):(0,l.kK)(t)?function(e,t){var n=(0,v.Z)(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):g(function(e){var t,n=(0,i.Z)(e),r=(0,c.Z)(e),o=null==(t=e.ownerDocument)?void 0:t.body,s=(0,p.Fp)(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),d=(0,p.Fp)(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),u=-r.scrollLeft+(0,a.Z)(e),l=-r.scrollTop;return"rtl"===(0,f.Z)(o||n).direction&&(u+=(0,p.Fp)(n.clientWidth,o?o.clientWidth:0)-s),{width:s,height:d,x:u,y:l}}((0,i.Z)(e)))}var b=n(581),w=n(293),x=n(706);function O(e,t){void 0===t&&(t={});var n=t,o=n.placement,a=void 0===o?e.placement:o,s=n.strategy,c=void 0===s?e.strategy:s,O=n.boundary,j=void 0===O?r.zV:O,k=n.rootBoundary,E=void 0===k?r.Pj:k,P=n.elementContext,M=void 0===P?r.k5:P,D=n.altBoundary,L=void 0!==D&&D,R=n.padding,A=void 0===R?0:R,S=(0,w.Z)("number"!=typeof A?A:(0,x.Z)(A,r.mv)),B=M===r.k5?r.YP:r.k5,F=e.rects.popper,V=e.elements[L?B:M],W=function(e,t,n,r){var o="clippingParents"===t?function(e){var t=(0,d.Z)((0,m.Z)(e)),n=["absolute","fixed"].indexOf((0,f.Z)(e).position)>=0&&(0,l.Re)(e)?(0,u.Z)(e):e;return(0,l.kK)(n)?t.filter((function(e){return(0,l.kK)(e)&&(0,h.Z)(e,n)&&"body"!==(0,Z.Z)(e)})):[]}(e):[].concat(t),i=[].concat(o,[n]),a=i[0],s=i.reduce((function(t,n){var o=y(e,n,r);return t.top=(0,p.Fp)(o.top,t.top),t.right=(0,p.VV)(o.right,t.right),t.bottom=(0,p.VV)(o.bottom,t.bottom),t.left=(0,p.Fp)(o.left,t.left),t}),y(e,a,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}((0,l.kK)(V)?V:V.contextElement||(0,i.Z)(e.elements.popper),j,E,c),I=(0,v.Z)(e.elements.reference),q=(0,b.Z)({reference:I,element:F,strategy:"absolute",placement:a}),N=g(Object.assign({},F,q)),T=M===r.k5?N:I,H={top:W.top-T.top+S.top,bottom:T.bottom-W.bottom+S.bottom,left:W.left-T.left+S.left,right:T.right-W.right+S.right},C=e.modifiersData.offset;if(M===r.k5&&C){var $=C[a];Object.keys(H).forEach((function(e){var t=[r.F2,r.I].indexOf(e)>=0?1:-1,n=[r.we,r.I].indexOf(e)>=0?"y":"x";H[e]+=$[n]*t}))}return H}},706:(e,t,n)=>{function r(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}n.d(t,{Z:()=>r})},206:(e,t,n)=>{function r(e){return e.split("-")[0]}n.d(t,{Z:()=>r})},607:(e,t,n)=>{function r(){return{top:0,right:0,bottom:0,left:0}}n.d(t,{Z:()=>r})},516:(e,t,n)=>{function r(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}n.d(t,{Z:()=>r})},943:(e,t,n)=>{function r(e){return e.split("-")[1]}n.d(t,{Z:()=>r})},138:(e,t,n)=>{n.d(t,{Fp:()=>r,NM:()=>i,VV:()=>o});var r=Math.max,o=Math.min,i=Math.round},293:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(607);function o(e){return Object.assign({},(0,r.Z)(),e)}},918:(e,t,n)=>{function r(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}n.d(t,{Z:()=>r})},711:(e,t,n)=>{n.d(t,{q:()=>i,u:()=>o});var r=n(138);function o(e,t,n){return(0,r.Fp)(e,(0,r.VV)(t,n))}function i(e,t,n){var r=o(e,t,n);return r>n?n:r}},91:(e,t,n)=>{var r=n(909);const o=n.p+"assets/MartinGreenResume.pdf",i=n.p+"assets/windfarm.png";window.addEventListener("DOMContentLoaded",(e=>{function t(){const e=document.body.querySelector("#mainNav");e&&(0===window.scrollY?e.classList.remove("navbar-shrink"):e.classList.add("navbar-shrink"))}t(),document.addEventListener("scroll",t),document.body.querySelector("#mainNav")&&new r.DA(document.body,{target:"#mainNav",offset:222});const n=document.body.querySelector(".navbar-toggler");[].slice.call(document.querySelectorAll("#navbarResponsive .nav-link")).map((function(e){e.addEventListener("click",(()=>{"none"!==window.getComputedStyle(n).display&&n.click()}))})),document.getElementById("resumeDownload").href=o,document.getElementById("windfarmImg").href=i}))}},n={};function r(e){var o=n[e];if(void 0!==o)return o.exports;var i=n[e]={exports:{}};return t[e](i,i.exports,r),i.exports}r.m=t,e=[],r.O=(t,n,o,i)=>{if(!n){var a=1/0;for(p=0;p<e.length;p++){for(var[n,o,i]=e[p],s=!0,f=0;f<n.length;f++)(!1&i||a>=i)&&Object.keys(r.O).every((e=>r.O[e](n[f])))?n.splice(f--,1):(s=!1,i<a&&(a=i));if(s){e.splice(p--,1);var c=o();void 0!==c&&(t=c)}}return t}i=i||0;for(var p=e.length;p>0&&e[p-1][2]>i;p--)e[p]=e[p-1];e[p]=[n,o,i]},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!e;)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{var e={826:0,437:0};r.O.j=t=>0===e[t];var t=(t,n)=>{var o,i,[a,s,f]=n,c=0;if(a.some((t=>0!==e[t]))){for(o in s)r.o(s,o)&&(r.m[o]=s[o]);if(f)var p=f(r)}for(t&&t(n);c<a.length;c++)i=a[c],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return r.O(p)},n=self.webpackChunkportfolio=self.webpackChunkportfolio||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var o=r.O(void 0,[437,51],(()=>r(91)));o=r.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,